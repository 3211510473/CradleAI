server {
    listen 80;
    server_name chat.cradleintro.top;

    # Redirect HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}
   
server {
    listen 443 ssl;
    server_name chat.cradleintro.top;

    # SSL configuration
    ssl_certificate /www/wwwroot/test/fullchain.pem;
    ssl_certificate_key /www/wwwroot/test/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Root for static files
    root /var/www/html/chat.cradleintro.top;
    index index.php index.html;

    # Access and error logs
    access_log /www/wwwroot/chat.cradleintro.top-access.log;
    error_log /www/wwwroot/chat.cradleintro.top-error.log debug;

    # API Proxy endpoint for cloud service
    location /chat {

        # Check if license key and device ID headers are present
        if ($http_x_license_key = '') {
            return 403 '{"error": "Missing license key"}';
        }
        if ($http_x_device_id = '') {
            return 403 '{"error": "Missing device ID"}';
        }

        # Extract the endpoint parameter directly without any additional decoding
        set $provider $http_x_provider;
        set $endpoint $arg_endpoint;
        
        # Log the received parameters for debugging, but mask API keys
        # Create a masked version of the endpoint for logging
        set $masked_endpoint $endpoint;
        if ($masked_endpoint ~ "key=([^&]{4})([^&]*)") {
            set $masked_endpoint $masked_endpoint;
            set_by_lua_block $masked_endpoint {
                return ngx.re.sub(ngx.var.masked_endpoint, "key=([^&]{4})([^&]*)", "key=\\1****")
            }
        }
        error_log "Provider: $provider, Raw Endpoint (masked): $masked_endpoint";
        
        # Set the target URL directly to the endpoint parameter
        # This avoids any parsing or modification of the URL
        set $target_url $endpoint;
        
        # Determine the host based on the provider
        set $target_host '';
        if ($provider = 'gemini') {
            set $target_host "generativelanguage.googleapis.com";
        }
        if ($provider = 'openrouter') {
            set $target_host "openrouter.ai";
        }
        
        # If no valid provider was specified, return an error
        if ($target_host = '') {
            return 400 '{"error": "Invalid provider. Use gemini or openrouter"}';
        }
        
        # Log the target URL for debugging (with masked API key)
        error_log "Target URL (masked): $masked_endpoint";
        error_log "Target Host: $target_host";
        
        # Forward request to the target URL directly
        proxy_pass $target_url;
        
        # Request headers
        proxy_set_header Host $target_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Keep original content type and accept headers
        proxy_set_header Content-Type $http_content_type;
        proxy_set_header Accept $http_accept;
        
        # Pass through the original authorization header if present
        proxy_set_header Authorization $http_authorization;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 180s;
        proxy_read_timeout 180s;
        
        # Add server headers
        add_header X-Proxied-By "CradleCloud";
        add_header Cache-Control "no-store, no-cache, must-revalidate";
        
        # Custom access log format that masks API keys
        log_format masked_log '$remote_addr - $remote_user [$time_local] '
                             '"$request_method $scheme://$host$request_uri" $status '
                             '$body_bytes_sent "$http_referer" "$http_user_agent" '
                             'masked_endpoint="$masked_endpoint"';
        
        access_log /www/wwwroot/chat.cradleintro.top-proxy.log masked_log;
    }

    # Default location block
    location / {
        try_files $uri $uri/ =404;
    }
    
}